// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./client"

  runtime                = "bun"
  moduleFormat           = "esm"
  generatedFileExtension = "ts"
  importFileExtension    = "ts"
}

generator prismabox {
  provider                    = "prismabox"
  // you can optionally specify the output location. Defaults to ./prismabox
  output                      = "./prismabox"
  // if you want, you can customize the imported variable name that is used for the schemes. Defaults to "Type" which is what the standard typebox package offers
  typeboxImportVariableName   = "t"
  // you also can specify the dependency from which the above import should happen. This is useful if a package re-exports the typebox package and you would like to use that
  typeboxImportDependencyName = "elysia"
  // by default the generated schemes do not allow additional properties. You can allow them by setting this to true
  // additionalProperties        = true
  // optionally enable the data model generation. See the data model section below for more info
  inputModel                  = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY

  @@map("gender")
}

enum FileLibraryAssetType {
  PRODUCT_IMAGE
  USER_IMAGE
  SCHOOL_LOGO
  PRODUCT_BRAND_LOGO
  SCHOOL_BRAND_LOGO

  @@map("file_library_asset_type")
}

enum FileLibraryAssetFileType {
  IMAGE
  VIDEO

  @@map("file_library_asset_file_type")
}

enum FileLibraryAssetMimeType {
  IMAGE_JPEG // image/jpeg
  IMAGE_PNG // image/png
  IMAGE_GIF // image/gif
  IMAGE_WEBP // image/webp
  IMAGE_SVG // image/svg+xml
  IMAGE_BMP // image/bmp
  IMAGE_TIFF // image/tiff

  VIDEO_MP4 // video/mp4
  VIDEO_AVI // video/avi
  VIDEO_MPEG // video/mpeg
  VIDEO_WEBM // video/webm
  VIDEO_OGG // video/ogg

  @@map("file_asset_mime_type")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  SHIPPED
  DELIVERED
  CANCELLED

  @@map("order_status")
}

model User {
  id String @id @default(uuid())

  /// @prismabox.options{minLength:3,maxLength:255}
  email String @unique @db.VarChar(255)

  /// @prismabox.options{minLength:2,maxLength:50}
  firstName String @map("first_name") @db.VarChar(50)
  /// @prismabox.options{minLength:2,maxLength:50}
  lastName  String @map("last_name") @db.VarChar(50)
  /// @prismabox.hide.input
  name      String @map("full_name") @db.VarChar(101)

  gender Gender

  createdBy   User?   @relation("UserToCreator", fields: [createdById], references: [id], onDelete: SetNull)
  /// @prismabox.hide
  createdById String? @map("created_by_id")

  rolesSlugs String[] @default([]) @map("roles_slugs")

  emailVerified Boolean

  image      String?           @db.VarChar(255)
  imageId    Int?              @map("image_id")
  imageAsset FileLibraryAsset? @relation(fields: [imageId], references: [id])

  isActive Boolean @default(true) @map("is_active")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  /// @prismabox.input.hide
  deletedAt DateTime? @map("deleted_at")

  isBanned     Boolean?
  banReason    String?
  banExpiresAt DateTime?

  createdUsers   User[]        @relation("UserToCreator")
  auditLogs      AuditLog[]    @relation("AuditLogsToUser")
  posts          Post[]        @relation("PostToUser")
  userRoles      UserRole[]    @relation("UserRoleToUser")
  sessions       Session[]
  accounts       Account[]
  impersonations Session[]     @relation("SessionToImpersonatedBy")
  orders         Order[]       @relation("OrderToUser")
  addresses      UserAddress[] @relation("UserAddressToUser")
  cart           Cart?         @relation("CartToUser")

  @@index([deletedAt])
  @@map("users")
}

model Role {
  /// @prismabox.hide
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  /// @prismabox.options{minLength:2,maxLength:32}
  name String @unique @db.VarChar(32)

  /// @prismabox.options{minLength:2,maxLength:64}
  slug String @unique @db.VarChar(64)

  /// @prismabox.options{minLength:0,maxLength:255}
  description String? @db.VarChar(255)

  permissions Json @default("[]") @db.JsonB

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  /// @prismabox.input.hide
  deletedAt DateTime? @map("deleted_at")

  userRoles UserRole[] @relation("UserRoleToRole")

  @@map("roles")
}

model AuditLog {
  /// @prismabox.hide
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  user   User   @relation("AuditLogsToUser", fields: [userId], references: [id])
  /// @prismabox.hide
  userId String @map("user_id")

  actionType String @map("action_type")
  entityType String @map("entity_type")
  entityUuid String @map("entity_uuid")

  /// @prismabox.options{minLength:0,maxLength:1024}
  description String? @map("description") @db.Text

  metadata Json? @db.JsonB

  ipAddress String? @map("ip_address") @db.VarChar(45)
  userAgent String? @map("user_agent") @db.VarChar(255)

  createdAt DateTime @default(now()) @map("created_at")

  @@index([createdAt])
  @@index([actionType])
  @@index([entityType])
  @@index([entityUuid])
  @@map("audit_logs")
}

model Post {
  /// @prismabox.hide
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  /// @prismabox.options{minLength:2,maxLength:255}
  title String @db.VarChar(255)

  /// @prismabox.options{minLength:2}
  content String @db.Text

  author   User   @relation("PostToUser", fields: [authorId], references: [id], onDelete: Cascade)
  /// @prismabox.hide
  authorId String @map("author_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  /// @prismabox.input.hide
  deletedAt DateTime? @map("deleted_at")

  @@index([deletedAt])
  @@map("posts")
}

model UserRole {
  /// @prismabox.hide
  id Int @id @default(autoincrement())

  user   User   @relation("UserRoleToUser", fields: [userId], references: [id], onDelete: Cascade)
  // We can't put prismabox.hide here because of bug
  userId String @map("user_id")

  role   Role @relation("UserRoleToRole", fields: [roleId], references: [id], onDelete: Cascade)
  // We can't put prismabox.hide here because of bug
  roleId Int  @map("role_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, roleId])
  @@index([roleId])
  @@index([userId])
  @@map("user_roles")
}

model Session {
  id     String @id @default(uuid())
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  /// @prismabox.hide
  token String

  impersonatedById String? @map("impersonated_by_id")
  impersonatedBy   User?   @relation("SessionToImpersonatedBy", fields: [impersonatedById], references: [id], onDelete: SetNull)

  ipAddress String? @map("ip_address")
  userAgent String? @map("user_agent")

  expiresAt DateTime @map("expires_at")
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")

  @@unique([token])
  @@map("sessions")
}

model Account {
  id         String @id @default(uuid())
  accountId  String @map("account_id")
  providerId String @map("provider_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  accessToken  String? @map("access_token")
  refreshToken String? @map("refresh_token")

  idToken  String? @map("id_token")
  scope    String?
  password String?

  accessTokenExpiresAt  DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")

  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")

  @@map("accounts")
}

model Verification {
  id         String @id @default(uuid())
  identifier String

  value String

  expiresAt DateTime  @map("expires_at")
  createdAt DateTime? @map("created_at")
  updatedAt DateTime? @map("updated_at")

  @@map("verifications")
}

model Region {
  id       Int  @id @default(autoincrement())
  sourceId Int? @unique @map("source_id")

  name String @unique

  translations Json?
  wikiDataId   String?  @map("wiki_data_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  countries  Country[]
  subregions Subregion[]

  @@map("regions")
}

model Subregion {
  id       Int  @id @default(autoincrement())
  sourceId Int? @unique @map("source_id")

  name String @unique

  translations Json?
  wikiDataId   String?  @map("wiki_data_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  regionName String @map("region_name")
  regionId   Int    @map("region_id")
  region     Region @relation(fields: [regionId], references: [id])

  countries Country[]

  @@index([regionId])
  @@map("subregions")
}

model Country {
  id       Int  @id @default(autoincrement())
  sourceId Int? @unique @map("source_id")

  name           String
  iso3           String  @unique @db.Char(3)
  iso2           String  @unique @db.Char(2)
  numericCode    String? @map("numeric_code") @db.Char(3)
  phoneCode      String? @map("phone_code")
  capital        String?
  currency       String?
  currencyName   String? @map("currency_name")
  currencySymbol String? @map("currency_symbol")
  tld            String?
  native         String?

  latitude     Decimal? @db.Decimal(10, 8)
  longitude    Decimal? @db.Decimal(11, 8)
  emoji        String?
  emojiU       String?  @map("emoji_u")
  timezones    Json?
  translations Json?
  wikiDataId   String?  @map("wiki_data_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  regionName String? @map("region_name")
  regionId   Int?    @map("region_id")
  region     Region? @relation(fields: [regionId], references: [id])

  subregionName String?    @map("subregion_name")
  subregionId   Int?       @map("subregion_id")
  subregion     Subregion? @relation(fields: [subregionId], references: [id])

  states State[]
  cities City[]

  @@index([regionId])
  @@index([subregionId])
  @@map("countries")
}

model State {
  id       Int  @id @default(autoincrement())
  sourceId Int? @unique @map("source_id")

  name String

  stateCode  String?  @map("state_code")
  fipsCode   String?  @map("fips_code")
  iso2       String?
  type       String?
  latitude   Decimal? @db.Decimal(10, 8)
  longitude  Decimal? @db.Decimal(11, 8)
  wikiDataId String?  @map("wiki_data_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  countryName String  @map("country_name")
  countryCode String  @map("country_code") @db.Char(2)
  countryId   Int     @map("country_id")
  country     Country @relation(fields: [countryId], references: [id])

  cities City[]

  @@index([countryId])
  @@map("states")
}

model City {
  id       Int  @id @default(autoincrement())
  sourceId Int? @unique @map("source_id")

  name String

  latitude   Decimal? @db.Decimal(10, 8)
  longitude  Decimal? @db.Decimal(11, 8)
  wikiDataId String?  @map("wiki_data_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  stateName String @map("state_name")
  stateCode String @map("state_code")
  stateId   Int    @map("state_id")
  state     State  @relation(fields: [stateId], references: [id])

  countryCode String  @map("country_code")
  countryName String  @map("country_name")
  countryId   Int     @map("country_id")
  country     Country @relation(fields: [countryId], references: [id])

  userAddresses     UserAddress[]
  customerAddresses CustomerAddress[]

  @@index([stateId])
  @@index([countryId])
  @@map("cities")
}

model FileLibraryAsset {
  /// @prismabox.hide
  id Int @id @default(autoincrement())

  uuid String @unique @default(uuid())

  name String @map("name") @db.VarChar(512)

  type FileLibraryAssetType @map("type")

  fileType FileLibraryAssetFileType @map("file_type")

  mimeType FileLibraryAssetMimeType @map("mime_type")

  size BigInt @map("size") @db.BigInt

  path String @map("path") @db.VarChar(512)

  //Özellik eklenebilir
  //uploaderId String? @map("uploader_id")
  //uploader   User?   @relation(fields: [uploaderId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  User      User[]

  @@map("file_library_assets")
}

model Customer {
  /// @prismabox.hide
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  /// @prismabox.options{minLength:2,maxLength:50}
  firstName String @map("first_name") @db.VarChar(50)

  /// @prismabox.options{minLength:2,maxLength:50}
  lastName String @map("last_name") @db.VarChar(50)

  /// @prismabox.options{minLength:2,maxLength:101}
  name String @map("full_name") @db.VarChar(101)

  /// @prismabox.options{minLength:2,maxLength:100}
  username String @unique @db.VarChar(100)

  /// @prismabox.options{minLength:2,maxLength:100}
  email String @unique @db.VarChar(100)

  password String

  refreshToken String? @map("refresh_token")

  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  ProductComments ProductComments[]
  addresses       CustomerAddress[] @relation("CustomerAddressToCustomer")

  @@map("customers")
}

model Category {
  /// @prismabox.hide
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  /// @prismabox.options{minLength:2,maxLength:100}
  name String @unique

  /// @prismabox.options{minLength:2,maxLength:100}
  slug String @unique

  /// @prismabox.options{minimum:0}
  order Int @default(0)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  products  Product[]

  @@map("categories")
}

model Product {
  /// @prismabox.hide
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  /// @prismabox.hide
  categoryId Int @map("category_id")

  /// @prismabox.options{minLength:2,maxLength:100}
  name String

  /// @prismabox.options{minLength:2,maxLength:100}
  slug String @unique

  /// @prismabox.options{minimum:0}
  stock Int @default(0)

  /// @prismabox.options{minLength:0,maxLength:100}
  variant String? @db.VarChar(100)

  /// @prismabox.options{default:true}
  isActive Boolean @default(true) @map("is_active")

  /// @prismabox.options{minLength:0,maxLength:50}
  shortDescription String @map("short_description") @db.VarChar(50)

  /// @prismabox.options{minLength:0,maxLength:250}
  longDescription String @map("long_description") @db.VarChar(250)

  /// @prismabox.options{minimum:0}
  price Int

  /// @prismabox.options{minLength:0,maxLength:255}
  primaryPhotoUrl String @map("primary_photo_url")

  /// @prismabox.options{minimum:0}
  reviewCount Int @default(0) @map("review_count")

  /// @prismabox.options{minimum:0,maximum:5}
  averageRating Int @default(0) @map("average_rating")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  category        Category          @relation(fields: [categoryId], references: [id])
  photos          ProductPhoto[]
  comments        ProductComments[]
  cartItems       CartItem[]        @relation("CartItemToProduct")
  orderItems      OrderItem[]       @relation("OrderItemToProduct")
  productVariants ProductVariant[]

  @@map("products")
}

model ProductVariant {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  name String

  cartItems CartItem[] @relation("CartItemToProductVariant")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([productId, name])
  @@map("product_variants")
}

model ProductPhoto {
  /// @prismabox.hide
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  /// @prismabox.hide
  productId Int @map("product_id")

  /// @prismabox.options{default:false}
  isPrimaryPhoto Boolean @default(false) @map("is_primary_photo")

  /// @prismabox.options{minLength:0,maxLength:255}
  url String

  /// @prismabox.options{minimum:0}
  fileSize Int @map("file_size")

  /// @prismabox.options{minimum:0}
  order Int @default(0)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  product Product @relation(fields: [productId], references: [id])

  @@map("product_photos")
}

model ProductComments {
  /// @prismabox.hide
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  /// @prismabox.hide

  /// @prismabox.hide
  productId Int

  /// @prismabox.hide
  customerId Int

  /// @prismabox.options{minLength:0,maxLength:50}
  title String? @map("title") @db.VarChar(50)

  /// @prismabox.options{minLength:0,maxLength:250}
  content String? @map("content") @db.VarChar(250)

  /// @prismabox.options{minimum:1,maximum:5}
  rating Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Product   Product  @relation(fields: [productId], references: [id])
  Customer  Customer @relation(fields: [customerId], references: [id])

  @@map("product_comments")
}

model Cart {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  /// @prismabox.hide
  userId String @unique @map("user_id")
  user   User   @relation("CartToUser", fields: [userId], references: [id], onDelete: Cascade)

  items CartItem[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("carts")
}

model CartItem {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  /// @prismabox.hide
  cartId Int  @map("cart_id")
  cart   Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)

  /// @prismabox.hide
  productId Int     @map("product_id")
  product   Product @relation("CartItemToProduct", fields: [productId], references: [id])

  /// @prismabox.options{minimum:1}
  quantity Int @default(1)

  /// @prismabox.hide
  productVariantId Int            @map("product_variant_id")
  productVariant   ProductVariant @relation("CartItemToProductVariant", fields: [productVariantId], references: [id], onDelete: Cascade)

  /// @prismabox.options{minimum:0}
  unitPrice Int @map("unit_price") // Ürünün o anki fiyatı

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // @@unique([cartId, productVariantId])
  @@map("cart_items")
}

model Order {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  /// @prismabox.hide
  userId String @map("user_id")
  user   User   @relation("OrderToUser", fields: [userId], references: [id])

  /// @prismabox.options{minLength:1,maxLength:20}
  orderNumber String @unique @map("order_number")

  status OrderStatus @default(PENDING)

  /// @prismabox.options{minimum:0}
  subtotal Int

  shippingAddress Json @map("shipping_address") @db.JsonB

  items OrderItem[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("orders")
}

model OrderItem {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  /// @prismabox.hide
  orderId Int   @map("order_id")
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  /// @prismabox.hide
  productId Int     @map("product_id")
  product   Product @relation("OrderItemToProduct", fields: [productId], references: [id])

  /// @prismabox.options{minimum:1}
  quantity Int

  /// @prismabox.options{minimum:0}
  unitPrice Int @map("unit_price") // Sipariş anındaki ürün fiyatı

  /// @prismabox.options{minimum:0}
  totalPrice Int @map("total_price") // quantity * unitPrice

  createdAt DateTime @default(now()) @map("created_at")

  @@map("order_items")
}

model UserAddress {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  /// @prismabox.hide
  userId String @map("user_id")
  user   User   @relation("UserAddressToUser", fields: [userId], references: [id], onDelete: Cascade)

  /// @prismabox.options{minLength:2,maxLength:100}
  title String @db.VarChar(30) // "Ev", "İş" vs.

  /// @prismabox.options{minLength:2,maxLength:100}
  recipientName String @map("recipient_name") @db.VarChar(100)

  /// @prismabox.options{minLength:10,maxLength:15}
  phone String @db.VarChar(15)

  /// @prismabox.options{minLength:5,maxLength:255}
  addressLine1 String @map("address_line_1") @db.VarChar(255)

  /// @prismabox.options{minLength:0,maxLength:255}
  addressLine2 String? @map("address_line_2") @db.VarChar(255)

  /// @prismabox.hide
  cityId Int  @map("city_id")
  city   City @relation(fields: [cityId], references: [id])

  /// @prismabox.options{minLength:5,maxLength:10}
  postalCode String @map("postal_code") @db.VarChar(10)

  isDefault Boolean @default(false) @map("is_default")

  createdAt DateTime @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_addresses")
}

model CustomerAddress {
  /// @prismabox.hide
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  /// @prismabox.hide
  customerId Int      @map("customer_id")
  customer   Customer @relation("CustomerAddressToCustomer", fields: [customerId], references: [id], onDelete: Cascade)

  /// @prismabox.options{minLength:2,maxLength:100}
  title String @db.VarChar(30) // "Ev", "İş" vs.

  /// @prismabox.options{minLength:2,maxLength:100}
  recipientName String @map("recipient_name") @db.VarChar(100)

  /// @prismabox.options{minLength:10,maxLength:15}
  phone String @db.VarChar(15)

  /// @prismabox.options{minLength:5,maxLength:255}
  addressLine1 String @map("address_line_1") @db.VarChar(255)

  /// @prismabox.options{minLength:0,maxLength:255}
  addressLine2 String? @map("address_line_2") @db.VarChar(255)

  /// @prismabox.hide
  cityId Int  @map("city_id")
  city   City @relation(fields: [cityId], references: [id])

  /// @prismabox.options{minLength:5,maxLength:10}
  postalCode String @map("postal_code") @db.VarChar(10)

  isDefault Boolean @default(false) @map("is_default")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("customer_addresses")
}
