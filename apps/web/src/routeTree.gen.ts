/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AdminRouteImport } from './routes/admin/route'
import { Route as publicRouteImport } from './routes/(public)/route'
import { Route as authRouteImport } from './routes/(auth)/route'
import { Route as publicIndexImport } from './routes/(public)/index'
import { Route as authSignUpImport } from './routes/(auth)/sign-up'
import { Route as authSignInImport } from './routes/(auth)/sign-in'
import { Route as authOtpImport } from './routes/(auth)/otp'
import { Route as authForgotPasswordImport } from './routes/(auth)/forgot-password'
import { Route as AdminUsersIndexImport } from './routes/admin/users/index'
import { Route as AdminProductsIndexImport } from './routes/admin/products/index'
import { Route as AdminParcelsIndexImport } from './routes/admin/parcels/index'
import { Route as AdminOrdersIndexImport } from './routes/admin/orders/index'
import { Route as AdminDashboardIndexImport } from './routes/admin/dashboard/index'
import { Route as AdminCategoriesIndexImport } from './routes/admin/categories/index'
import { Route as publicSssIndexImport } from './routes/(public)/sss/index'
import { Route as publicLoginIndexImport } from './routes/(public)/login/index'
import { Route as publicContactIndexImport } from './routes/(public)/contact/index'
import { Route as publicAboutIndexImport } from './routes/(public)/about/index'
import { Route as AdminParcelsParcelIdImport } from './routes/admin/parcels/$parcelId'
import { Route as AdminProductsProductVariantsIndexImport } from './routes/admin/products/product-variants/index'
import { Route as AdminProductsProductCommentsIndexImport } from './routes/admin/products/product-comments/index'

// Create Virtual Routes

const PaymentLazyImport = createFileRoute('/payment')()
const errors503LazyImport = createFileRoute('/(errors)/503')()
const errors500LazyImport = createFileRoute('/(errors)/500')()
const errors404LazyImport = createFileRoute('/(errors)/404')()
const errors403LazyImport = createFileRoute('/(errors)/403')()
const errors401LazyImport = createFileRoute('/(errors)/401')()
const publicProductsIndexLazyImport = createFileRoute('/(public)/products/')()
const publicAccountIndexLazyImport = createFileRoute('/(public)/account/')()
const publicProductsProductIdLazyImport = createFileRoute(
  '/(public)/products/$productId',
)()

// Create/Update Routes

const PaymentLazyRoute = PaymentLazyImport.update({
  id: '/payment',
  path: '/payment',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/payment.lazy').then((d) => d.Route))

const AdminRouteRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const publicRouteRoute = publicRouteImport.update({
  id: '/(public)',
  getParentRoute: () => rootRoute,
} as any)

const authRouteRoute = authRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const publicIndexRoute = publicIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => publicRouteRoute,
} as any)

const errors503LazyRoute = errors503LazyImport
  .update({
    id: '/(errors)/503',
    path: '/503',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(errors)/503.lazy').then((d) => d.Route))

const errors500LazyRoute = errors500LazyImport
  .update({
    id: '/(errors)/500',
    path: '/500',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(errors)/500.lazy').then((d) => d.Route))

const errors404LazyRoute = errors404LazyImport
  .update({
    id: '/(errors)/404',
    path: '/404',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(errors)/404.lazy').then((d) => d.Route))

const errors403LazyRoute = errors403LazyImport
  .update({
    id: '/(errors)/403',
    path: '/403',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(errors)/403.lazy').then((d) => d.Route))

const errors401LazyRoute = errors401LazyImport
  .update({
    id: '/(errors)/401',
    path: '/401',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(errors)/401.lazy').then((d) => d.Route))

const authSignUpRoute = authSignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => authRouteRoute,
} as any)

const authSignInRoute = authSignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => authRouteRoute,
} as any)

const authOtpRoute = authOtpImport.update({
  id: '/otp',
  path: '/otp',
  getParentRoute: () => authRouteRoute,
} as any)

const authForgotPasswordRoute = authForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => authRouteRoute,
} as any)

const publicProductsIndexLazyRoute = publicProductsIndexLazyImport
  .update({
    id: '/products/',
    path: '/products/',
    getParentRoute: () => publicRouteRoute,
  } as any)
  .lazy(() =>
    import('./routes/(public)/products/index.lazy').then((d) => d.Route),
  )

const publicAccountIndexLazyRoute = publicAccountIndexLazyImport
  .update({
    id: '/account/',
    path: '/account/',
    getParentRoute: () => publicRouteRoute,
  } as any)
  .lazy(() =>
    import('./routes/(public)/account/index.lazy').then((d) => d.Route),
  )

const AdminUsersIndexRoute = AdminUsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminProductsIndexRoute = AdminProductsIndexImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminParcelsIndexRoute = AdminParcelsIndexImport.update({
  id: '/parcels/',
  path: '/parcels/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminOrdersIndexRoute = AdminOrdersIndexImport.update({
  id: '/orders/',
  path: '/orders/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminDashboardIndexRoute = AdminDashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminCategoriesIndexRoute = AdminCategoriesIndexImport.update({
  id: '/categories/',
  path: '/categories/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const publicSssIndexRoute = publicSssIndexImport.update({
  id: '/sss/',
  path: '/sss/',
  getParentRoute: () => publicRouteRoute,
} as any)

const publicLoginIndexRoute = publicLoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => publicRouteRoute,
} as any)

const publicContactIndexRoute = publicContactIndexImport.update({
  id: '/contact/',
  path: '/contact/',
  getParentRoute: () => publicRouteRoute,
} as any)

const publicAboutIndexRoute = publicAboutIndexImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => publicRouteRoute,
} as any)

const publicProductsProductIdLazyRoute = publicProductsProductIdLazyImport
  .update({
    id: '/products/$productId',
    path: '/products/$productId',
    getParentRoute: () => publicRouteRoute,
  } as any)
  .lazy(() =>
    import('./routes/(public)/products/$productId.lazy').then((d) => d.Route),
  )

const AdminParcelsParcelIdRoute = AdminParcelsParcelIdImport.update({
  id: '/parcels/$parcelId',
  path: '/parcels/$parcelId',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminProductsProductVariantsIndexRoute =
  AdminProductsProductVariantsIndexImport.update({
    id: '/products/product-variants/',
    path: '/products/product-variants/',
    getParentRoute: () => AdminRouteRoute,
  } as any)

const AdminProductsProductCommentsIndexRoute =
  AdminProductsProductCommentsIndexImport.update({
    id: '/products/product-comments/',
    path: '/products/product-comments/',
    getParentRoute: () => AdminRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteImport
      parentRoute: typeof rootRoute
    }
    '/(public)': {
      id: '/(public)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicRouteImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRoute
    }
    '/payment': {
      id: '/payment'
      path: '/payment'
      fullPath: '/payment'
      preLoaderRoute: typeof PaymentLazyImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/forgot-password': {
      id: '/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/otp': {
      id: '/(auth)/otp'
      path: '/otp'
      fullPath: '/otp'
      preLoaderRoute: typeof authOtpImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/sign-up': {
      id: '/(auth)/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof authSignUpImport
      parentRoute: typeof authRouteImport
    }
    '/(errors)/401': {
      id: '/(errors)/401'
      path: '/401'
      fullPath: '/401'
      preLoaderRoute: typeof errors401LazyImport
      parentRoute: typeof rootRoute
    }
    '/(errors)/403': {
      id: '/(errors)/403'
      path: '/403'
      fullPath: '/403'
      preLoaderRoute: typeof errors403LazyImport
      parentRoute: typeof rootRoute
    }
    '/(errors)/404': {
      id: '/(errors)/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof errors404LazyImport
      parentRoute: typeof rootRoute
    }
    '/(errors)/500': {
      id: '/(errors)/500'
      path: '/500'
      fullPath: '/500'
      preLoaderRoute: typeof errors500LazyImport
      parentRoute: typeof rootRoute
    }
    '/(errors)/503': {
      id: '/(errors)/503'
      path: '/503'
      fullPath: '/503'
      preLoaderRoute: typeof errors503LazyImport
      parentRoute: typeof rootRoute
    }
    '/(public)/': {
      id: '/(public)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicIndexImport
      parentRoute: typeof publicRouteImport
    }
    '/admin/parcels/$parcelId': {
      id: '/admin/parcels/$parcelId'
      path: '/parcels/$parcelId'
      fullPath: '/admin/parcels/$parcelId'
      preLoaderRoute: typeof AdminParcelsParcelIdImport
      parentRoute: typeof AdminRouteImport
    }
    '/(public)/products/$productId': {
      id: '/(public)/products/$productId'
      path: '/products/$productId'
      fullPath: '/products/$productId'
      preLoaderRoute: typeof publicProductsProductIdLazyImport
      parentRoute: typeof publicRouteImport
    }
    '/(public)/about/': {
      id: '/(public)/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof publicAboutIndexImport
      parentRoute: typeof publicRouteImport
    }
    '/(public)/contact/': {
      id: '/(public)/contact/'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof publicContactIndexImport
      parentRoute: typeof publicRouteImport
    }
    '/(public)/login/': {
      id: '/(public)/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof publicLoginIndexImport
      parentRoute: typeof publicRouteImport
    }
    '/(public)/sss/': {
      id: '/(public)/sss/'
      path: '/sss'
      fullPath: '/sss'
      preLoaderRoute: typeof publicSssIndexImport
      parentRoute: typeof publicRouteImport
    }
    '/admin/categories/': {
      id: '/admin/categories/'
      path: '/categories'
      fullPath: '/admin/categories'
      preLoaderRoute: typeof AdminCategoriesIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/dashboard/': {
      id: '/admin/dashboard/'
      path: '/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/orders/': {
      id: '/admin/orders/'
      path: '/orders'
      fullPath: '/admin/orders'
      preLoaderRoute: typeof AdminOrdersIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/parcels/': {
      id: '/admin/parcels/'
      path: '/parcels'
      fullPath: '/admin/parcels'
      preLoaderRoute: typeof AdminParcelsIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/products/': {
      id: '/admin/products/'
      path: '/products'
      fullPath: '/admin/products'
      preLoaderRoute: typeof AdminProductsIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/users/': {
      id: '/admin/users/'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/(public)/account/': {
      id: '/(public)/account/'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof publicAccountIndexLazyImport
      parentRoute: typeof publicRouteImport
    }
    '/(public)/products/': {
      id: '/(public)/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof publicProductsIndexLazyImport
      parentRoute: typeof publicRouteImport
    }
    '/admin/products/product-comments/': {
      id: '/admin/products/product-comments/'
      path: '/products/product-comments'
      fullPath: '/admin/products/product-comments'
      preLoaderRoute: typeof AdminProductsProductCommentsIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/products/product-variants/': {
      id: '/admin/products/product-variants/'
      path: '/products/product-variants'
      fullPath: '/admin/products/product-variants'
      preLoaderRoute: typeof AdminProductsProductVariantsIndexImport
      parentRoute: typeof AdminRouteImport
    }
  }
}

// Create and export the route tree

interface authRouteRouteChildren {
  authForgotPasswordRoute: typeof authForgotPasswordRoute
  authOtpRoute: typeof authOtpRoute
  authSignInRoute: typeof authSignInRoute
  authSignUpRoute: typeof authSignUpRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authForgotPasswordRoute: authForgotPasswordRoute,
  authOtpRoute: authOtpRoute,
  authSignInRoute: authSignInRoute,
  authSignUpRoute: authSignUpRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface publicRouteRouteChildren {
  publicIndexRoute: typeof publicIndexRoute
  publicProductsProductIdLazyRoute: typeof publicProductsProductIdLazyRoute
  publicAboutIndexRoute: typeof publicAboutIndexRoute
  publicContactIndexRoute: typeof publicContactIndexRoute
  publicLoginIndexRoute: typeof publicLoginIndexRoute
  publicSssIndexRoute: typeof publicSssIndexRoute
  publicAccountIndexLazyRoute: typeof publicAccountIndexLazyRoute
  publicProductsIndexLazyRoute: typeof publicProductsIndexLazyRoute
}

const publicRouteRouteChildren: publicRouteRouteChildren = {
  publicIndexRoute: publicIndexRoute,
  publicProductsProductIdLazyRoute: publicProductsProductIdLazyRoute,
  publicAboutIndexRoute: publicAboutIndexRoute,
  publicContactIndexRoute: publicContactIndexRoute,
  publicLoginIndexRoute: publicLoginIndexRoute,
  publicSssIndexRoute: publicSssIndexRoute,
  publicAccountIndexLazyRoute: publicAccountIndexLazyRoute,
  publicProductsIndexLazyRoute: publicProductsIndexLazyRoute,
}

const publicRouteRouteWithChildren = publicRouteRoute._addFileChildren(
  publicRouteRouteChildren,
)

interface AdminRouteRouteChildren {
  AdminParcelsParcelIdRoute: typeof AdminParcelsParcelIdRoute
  AdminCategoriesIndexRoute: typeof AdminCategoriesIndexRoute
  AdminDashboardIndexRoute: typeof AdminDashboardIndexRoute
  AdminOrdersIndexRoute: typeof AdminOrdersIndexRoute
  AdminParcelsIndexRoute: typeof AdminParcelsIndexRoute
  AdminProductsIndexRoute: typeof AdminProductsIndexRoute
  AdminUsersIndexRoute: typeof AdminUsersIndexRoute
  AdminProductsProductCommentsIndexRoute: typeof AdminProductsProductCommentsIndexRoute
  AdminProductsProductVariantsIndexRoute: typeof AdminProductsProductVariantsIndexRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminParcelsParcelIdRoute: AdminParcelsParcelIdRoute,
  AdminCategoriesIndexRoute: AdminCategoriesIndexRoute,
  AdminDashboardIndexRoute: AdminDashboardIndexRoute,
  AdminOrdersIndexRoute: AdminOrdersIndexRoute,
  AdminParcelsIndexRoute: AdminParcelsIndexRoute,
  AdminProductsIndexRoute: AdminProductsIndexRoute,
  AdminUsersIndexRoute: AdminUsersIndexRoute,
  AdminProductsProductCommentsIndexRoute:
    AdminProductsProductCommentsIndexRoute,
  AdminProductsProductVariantsIndexRoute:
    AdminProductsProductVariantsIndexRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof publicIndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/payment': typeof PaymentLazyRoute
  '/forgot-password': typeof authForgotPasswordRoute
  '/otp': typeof authOtpRoute
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/401': typeof errors401LazyRoute
  '/403': typeof errors403LazyRoute
  '/404': typeof errors404LazyRoute
  '/500': typeof errors500LazyRoute
  '/503': typeof errors503LazyRoute
  '/admin/parcels/$parcelId': typeof AdminParcelsParcelIdRoute
  '/products/$productId': typeof publicProductsProductIdLazyRoute
  '/about': typeof publicAboutIndexRoute
  '/contact': typeof publicContactIndexRoute
  '/login': typeof publicLoginIndexRoute
  '/sss': typeof publicSssIndexRoute
  '/admin/categories': typeof AdminCategoriesIndexRoute
  '/admin/dashboard': typeof AdminDashboardIndexRoute
  '/admin/orders': typeof AdminOrdersIndexRoute
  '/admin/parcels': typeof AdminParcelsIndexRoute
  '/admin/products': typeof AdminProductsIndexRoute
  '/admin/users': typeof AdminUsersIndexRoute
  '/account': typeof publicAccountIndexLazyRoute
  '/products': typeof publicProductsIndexLazyRoute
  '/admin/products/product-comments': typeof AdminProductsProductCommentsIndexRoute
  '/admin/products/product-variants': typeof AdminProductsProductVariantsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof publicIndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/payment': typeof PaymentLazyRoute
  '/forgot-password': typeof authForgotPasswordRoute
  '/otp': typeof authOtpRoute
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/401': typeof errors401LazyRoute
  '/403': typeof errors403LazyRoute
  '/404': typeof errors404LazyRoute
  '/500': typeof errors500LazyRoute
  '/503': typeof errors503LazyRoute
  '/admin/parcels/$parcelId': typeof AdminParcelsParcelIdRoute
  '/products/$productId': typeof publicProductsProductIdLazyRoute
  '/about': typeof publicAboutIndexRoute
  '/contact': typeof publicContactIndexRoute
  '/login': typeof publicLoginIndexRoute
  '/sss': typeof publicSssIndexRoute
  '/admin/categories': typeof AdminCategoriesIndexRoute
  '/admin/dashboard': typeof AdminDashboardIndexRoute
  '/admin/orders': typeof AdminOrdersIndexRoute
  '/admin/parcels': typeof AdminParcelsIndexRoute
  '/admin/products': typeof AdminProductsIndexRoute
  '/admin/users': typeof AdminUsersIndexRoute
  '/account': typeof publicAccountIndexLazyRoute
  '/products': typeof publicProductsIndexLazyRoute
  '/admin/products/product-comments': typeof AdminProductsProductCommentsIndexRoute
  '/admin/products/product-variants': typeof AdminProductsProductVariantsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/(public)': typeof publicRouteRouteWithChildren
  '/admin': typeof AdminRouteRouteWithChildren
  '/payment': typeof PaymentLazyRoute
  '/(auth)/forgot-password': typeof authForgotPasswordRoute
  '/(auth)/otp': typeof authOtpRoute
  '/(auth)/sign-in': typeof authSignInRoute
  '/(auth)/sign-up': typeof authSignUpRoute
  '/(errors)/401': typeof errors401LazyRoute
  '/(errors)/403': typeof errors403LazyRoute
  '/(errors)/404': typeof errors404LazyRoute
  '/(errors)/500': typeof errors500LazyRoute
  '/(errors)/503': typeof errors503LazyRoute
  '/(public)/': typeof publicIndexRoute
  '/admin/parcels/$parcelId': typeof AdminParcelsParcelIdRoute
  '/(public)/products/$productId': typeof publicProductsProductIdLazyRoute
  '/(public)/about/': typeof publicAboutIndexRoute
  '/(public)/contact/': typeof publicContactIndexRoute
  '/(public)/login/': typeof publicLoginIndexRoute
  '/(public)/sss/': typeof publicSssIndexRoute
  '/admin/categories/': typeof AdminCategoriesIndexRoute
  '/admin/dashboard/': typeof AdminDashboardIndexRoute
  '/admin/orders/': typeof AdminOrdersIndexRoute
  '/admin/parcels/': typeof AdminParcelsIndexRoute
  '/admin/products/': typeof AdminProductsIndexRoute
  '/admin/users/': typeof AdminUsersIndexRoute
  '/(public)/account/': typeof publicAccountIndexLazyRoute
  '/(public)/products/': typeof publicProductsIndexLazyRoute
  '/admin/products/product-comments/': typeof AdminProductsProductCommentsIndexRoute
  '/admin/products/product-variants/': typeof AdminProductsProductVariantsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/payment'
    | '/forgot-password'
    | '/otp'
    | '/sign-in'
    | '/sign-up'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/admin/parcels/$parcelId'
    | '/products/$productId'
    | '/about'
    | '/contact'
    | '/login'
    | '/sss'
    | '/admin/categories'
    | '/admin/dashboard'
    | '/admin/orders'
    | '/admin/parcels'
    | '/admin/products'
    | '/admin/users'
    | '/account'
    | '/products'
    | '/admin/products/product-comments'
    | '/admin/products/product-variants'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/payment'
    | '/forgot-password'
    | '/otp'
    | '/sign-in'
    | '/sign-up'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/admin/parcels/$parcelId'
    | '/products/$productId'
    | '/about'
    | '/contact'
    | '/login'
    | '/sss'
    | '/admin/categories'
    | '/admin/dashboard'
    | '/admin/orders'
    | '/admin/parcels'
    | '/admin/products'
    | '/admin/users'
    | '/account'
    | '/products'
    | '/admin/products/product-comments'
    | '/admin/products/product-variants'
  id:
    | '__root__'
    | '/(auth)'
    | '/(public)'
    | '/admin'
    | '/payment'
    | '/(auth)/forgot-password'
    | '/(auth)/otp'
    | '/(auth)/sign-in'
    | '/(auth)/sign-up'
    | '/(errors)/401'
    | '/(errors)/403'
    | '/(errors)/404'
    | '/(errors)/500'
    | '/(errors)/503'
    | '/(public)/'
    | '/admin/parcels/$parcelId'
    | '/(public)/products/$productId'
    | '/(public)/about/'
    | '/(public)/contact/'
    | '/(public)/login/'
    | '/(public)/sss/'
    | '/admin/categories/'
    | '/admin/dashboard/'
    | '/admin/orders/'
    | '/admin/parcels/'
    | '/admin/products/'
    | '/admin/users/'
    | '/(public)/account/'
    | '/(public)/products/'
    | '/admin/products/product-comments/'
    | '/admin/products/product-variants/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  authRouteRoute: typeof authRouteRouteWithChildren
  publicRouteRoute: typeof publicRouteRouteWithChildren
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  PaymentLazyRoute: typeof PaymentLazyRoute
  errors401LazyRoute: typeof errors401LazyRoute
  errors403LazyRoute: typeof errors403LazyRoute
  errors404LazyRoute: typeof errors404LazyRoute
  errors500LazyRoute: typeof errors500LazyRoute
  errors503LazyRoute: typeof errors503LazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  authRouteRoute: authRouteRouteWithChildren,
  publicRouteRoute: publicRouteRouteWithChildren,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  PaymentLazyRoute: PaymentLazyRoute,
  errors401LazyRoute: errors401LazyRoute,
  errors403LazyRoute: errors403LazyRoute,
  errors404LazyRoute: errors404LazyRoute,
  errors500LazyRoute: errors500LazyRoute,
  errors503LazyRoute: errors503LazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(auth)",
        "/(public)",
        "/admin",
        "/payment",
        "/(errors)/401",
        "/(errors)/403",
        "/(errors)/404",
        "/(errors)/500",
        "/(errors)/503"
      ]
    },
    "/(auth)": {
      "filePath": "(auth)/route.tsx",
      "children": [
        "/(auth)/forgot-password",
        "/(auth)/otp",
        "/(auth)/sign-in",
        "/(auth)/sign-up"
      ]
    },
    "/(public)": {
      "filePath": "(public)/route.tsx",
      "children": [
        "/(public)/",
        "/(public)/products/$productId",
        "/(public)/about/",
        "/(public)/contact/",
        "/(public)/login/",
        "/(public)/sss/",
        "/(public)/account/",
        "/(public)/products/"
      ]
    },
    "/admin": {
      "filePath": "admin/route.tsx",
      "children": [
        "/admin/parcels/$parcelId",
        "/admin/categories/",
        "/admin/dashboard/",
        "/admin/orders/",
        "/admin/parcels/",
        "/admin/products/",
        "/admin/users/",
        "/admin/products/product-comments/",
        "/admin/products/product-variants/"
      ]
    },
    "/payment": {
      "filePath": "payment.lazy.tsx"
    },
    "/(auth)/forgot-password": {
      "filePath": "(auth)/forgot-password.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/otp": {
      "filePath": "(auth)/otp.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/sign-in": {
      "filePath": "(auth)/sign-in.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/sign-up": {
      "filePath": "(auth)/sign-up.tsx",
      "parent": "/(auth)"
    },
    "/(errors)/401": {
      "filePath": "(errors)/401.lazy.tsx"
    },
    "/(errors)/403": {
      "filePath": "(errors)/403.lazy.tsx"
    },
    "/(errors)/404": {
      "filePath": "(errors)/404.lazy.tsx"
    },
    "/(errors)/500": {
      "filePath": "(errors)/500.lazy.tsx"
    },
    "/(errors)/503": {
      "filePath": "(errors)/503.lazy.tsx"
    },
    "/(public)/": {
      "filePath": "(public)/index.tsx",
      "parent": "/(public)"
    },
    "/admin/parcels/$parcelId": {
      "filePath": "admin/parcels/$parcelId.tsx",
      "parent": "/admin"
    },
    "/(public)/products/$productId": {
      "filePath": "(public)/products/$productId.lazy.tsx",
      "parent": "/(public)"
    },
    "/(public)/about/": {
      "filePath": "(public)/about/index.tsx",
      "parent": "/(public)"
    },
    "/(public)/contact/": {
      "filePath": "(public)/contact/index.tsx",
      "parent": "/(public)"
    },
    "/(public)/login/": {
      "filePath": "(public)/login/index.tsx",
      "parent": "/(public)"
    },
    "/(public)/sss/": {
      "filePath": "(public)/sss/index.tsx",
      "parent": "/(public)"
    },
    "/admin/categories/": {
      "filePath": "admin/categories/index.tsx",
      "parent": "/admin"
    },
    "/admin/dashboard/": {
      "filePath": "admin/dashboard/index.tsx",
      "parent": "/admin"
    },
    "/admin/orders/": {
      "filePath": "admin/orders/index.tsx",
      "parent": "/admin"
    },
    "/admin/parcels/": {
      "filePath": "admin/parcels/index.tsx",
      "parent": "/admin"
    },
    "/admin/products/": {
      "filePath": "admin/products/index.tsx",
      "parent": "/admin"
    },
    "/admin/users/": {
      "filePath": "admin/users/index.tsx",
      "parent": "/admin"
    },
    "/(public)/account/": {
      "filePath": "(public)/account/index.lazy.tsx",
      "parent": "/(public)"
    },
    "/(public)/products/": {
      "filePath": "(public)/products/index.lazy.tsx",
      "parent": "/(public)"
    },
    "/admin/products/product-comments/": {
      "filePath": "admin/products/product-comments/index.tsx",
      "parent": "/admin"
    },
    "/admin/products/product-variants/": {
      "filePath": "admin/products/product-variants/index.tsx",
      "parent": "/admin"
    }
  }
}
ROUTE_MANIFEST_END */
